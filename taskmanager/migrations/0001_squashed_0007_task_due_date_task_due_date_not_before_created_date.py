# Generated by Django 5.0.14 on 2025-07-15 11:01

import django.db.models.deletion
import django.db.models.functions.comparison
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('taskmanager', '0001_initial'), ('taskmanager', '0002_alter_task_options_alter_task_table_comment_and_more'), ('taskmanager', '0003_alter_task_table_comment_epic_task_epic_sprint'), ('taskmanager', '0004_alter_epic_table_comment_alter_sprint_table_comment_and_more'), ('taskmanager', '0005_sprint_end_date_after_start_date'), ('taskmanager', '0006_task_status_check'), ('taskmanager', '0007_task_due_date_task_due_date_not_before_created_date')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterModelTableComment(
            name='task',
            table_comment='Holds information about tasks',
        ),
        migrations.RemoveField(
            model_name='task',
            name='completed',
        ),
        migrations.RemoveField(
            model_name='task',
            name='user',
        ),
        migrations.AddField(
            model_name='task',
            name='creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='task',
            name='owner',
            field=models.ForeignKey(db_comment='Foreign Key to the User who currently owns the task.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='task',
            name='status',
            field=models.CharField(choices=[('UNASSIGNED', 'Unassigned'), ('IN_PROGRESS', 'In Progress'), ('DONE', 'Completed'), ('ARCHIVED', 'Archived')], db_comment='Can be UNASSIGNED, IN_PROGRESS, DONE, or ARCHIVED.', default='UNASSIGNED', max_length=20),
        ),
        migrations.AlterField(
            model_name='task',
            name='description',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterModelTableComment(
            name='task',
            table_comment=None,
        ),
        migrations.CreateModel(
            name='Epic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_epics', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='epic',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='taskmanager.epic'),
        ),
        migrations.CreateModel(
            name='Sprint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_sprints', to=settings.AUTH_USER_MODEL)),
                ('tasks', models.ManyToManyField(blank=True, related_name='sprints', to='taskmanager.task')),
            ],
        ),
        migrations.AlterModelTableComment(
            name='epic',
            table_comment='holds Epic information',
        ),
        migrations.AlterModelTableComment(
            name='sprint',
            table_comment='holds Sprint information',
        ),
        migrations.AlterModelTableComment(
            name='task',
            table_comment='Holds information about tasks',
        ),
        migrations.AddConstraint(
            model_name='sprint',
            constraint=models.CheckConstraint(check=models.Q(('end_date__gt', models.F('start_date'))), name='end_date_after_start_date'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(check=models.Q(('status', 'UNASSIGNED'), ('status', 'IN_PROGRESS'), ('status', 'DONE'), ('status', 'ARCHIVED'), _connector='OR'), name='status_check'),
        ),
        migrations.AddField(
            model_name='task',
            name='due_date',
            field=models.DateField(db_comment='The date by which the task should be completed', default=django.utils.timezone.now),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(check=models.Q(('due_date__gte', django.db.models.functions.comparison.Cast(models.F('created_at'), output_field=models.DateField()))), name='due_date_not_before_created_date'),
        ),
    ]
